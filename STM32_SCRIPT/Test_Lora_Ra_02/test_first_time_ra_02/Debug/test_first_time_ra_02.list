
test_first_time_ra_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003284  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003448  08003448  00004448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b8  080034b8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080034b8  080034b8  000044b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034c0  080034c0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c0  080034c0  000044c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034c4  080034c4  000044c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  080034d4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080034d4  000050b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007007  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000167c  00000000  00000000  0000c043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  0000d6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000054d  00000000  00000000  0000dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea29  00000000  00000000  0000e32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a69  00000000  00000000  0002cd56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8ff1  00000000  00000000  000357bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee7b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d2c  00000000  00000000  000ee7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000f0520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003430 	.word	0x08003430

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003430 	.word	0x08003430

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	@ 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2iz>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a8:	d215      	bcs.n	80009d6 <__aeabi_d2iz+0x36>
 80009aa:	d511      	bpl.n	80009d0 <__aeabi_d2iz+0x30>
 80009ac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d912      	bls.n	80009dc <__aeabi_d2iz+0x3c>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	bf18      	it	ne
 80009cc:	4240      	negne	r0, r0
 80009ce:	4770      	bx	lr
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	4770      	bx	lr
 80009d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009da:	d105      	bne.n	80009e8 <__aeabi_d2iz+0x48>
 80009dc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e0:	bf08      	it	eq
 80009e2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_uldivmod>:
 80009f0:	b953      	cbnz	r3, 8000a08 <__aeabi_uldivmod+0x18>
 80009f2:	b94a      	cbnz	r2, 8000a08 <__aeabi_uldivmod+0x18>
 80009f4:	2900      	cmp	r1, #0
 80009f6:	bf08      	it	eq
 80009f8:	2800      	cmpeq	r0, #0
 80009fa:	bf1c      	itt	ne
 80009fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000a00:	f04f 30ff 	movne.w	r0, #4294967295
 8000a04:	f000 b96a 	b.w	8000cdc <__aeabi_idiv0>
 8000a08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a10:	f000 f806 	bl	8000a20 <__udivmoddi4>
 8000a14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a1c:	b004      	add	sp, #16
 8000a1e:	4770      	bx	lr

08000a20 <__udivmoddi4>:
 8000a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a24:	9d08      	ldr	r5, [sp, #32]
 8000a26:	460c      	mov	r4, r1
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d14e      	bne.n	8000aca <__udivmoddi4+0xaa>
 8000a2c:	4694      	mov	ip, r2
 8000a2e:	458c      	cmp	ip, r1
 8000a30:	4686      	mov	lr, r0
 8000a32:	fab2 f282 	clz	r2, r2
 8000a36:	d962      	bls.n	8000afe <__udivmoddi4+0xde>
 8000a38:	b14a      	cbz	r2, 8000a4e <__udivmoddi4+0x2e>
 8000a3a:	f1c2 0320 	rsb	r3, r2, #32
 8000a3e:	4091      	lsls	r1, r2
 8000a40:	fa20 f303 	lsr.w	r3, r0, r3
 8000a44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a48:	4319      	orrs	r1, r3
 8000a4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a52:	fa1f f68c 	uxth.w	r6, ip
 8000a56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a5e:	fb07 1114 	mls	r1, r7, r4, r1
 8000a62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a66:	fb04 f106 	mul.w	r1, r4, r6
 8000a6a:	4299      	cmp	r1, r3
 8000a6c:	d90a      	bls.n	8000a84 <__udivmoddi4+0x64>
 8000a6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a72:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a76:	f080 8112 	bcs.w	8000c9e <__udivmoddi4+0x27e>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 810f 	bls.w	8000c9e <__udivmoddi4+0x27e>
 8000a80:	3c02      	subs	r4, #2
 8000a82:	4463      	add	r3, ip
 8000a84:	1a59      	subs	r1, r3, r1
 8000a86:	fa1f f38e 	uxth.w	r3, lr
 8000a8a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a8e:	fb07 1110 	mls	r1, r7, r0, r1
 8000a92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a96:	fb00 f606 	mul.w	r6, r0, r6
 8000a9a:	429e      	cmp	r6, r3
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x94>
 8000a9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa6:	f080 80fc 	bcs.w	8000ca2 <__udivmoddi4+0x282>
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	f240 80f9 	bls.w	8000ca2 <__udivmoddi4+0x282>
 8000ab0:	4463      	add	r3, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	1b9b      	subs	r3, r3, r6
 8000ab6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11d      	cbz	r5, 8000ac6 <__udivmoddi4+0xa6>
 8000abe:	40d3      	lsrs	r3, r2
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d905      	bls.n	8000ada <__udivmoddi4+0xba>
 8000ace:	b10d      	cbz	r5, 8000ad4 <__udivmoddi4+0xb4>
 8000ad0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e7f5      	b.n	8000ac6 <__udivmoddi4+0xa6>
 8000ada:	fab3 f183 	clz	r1, r3
 8000ade:	2900      	cmp	r1, #0
 8000ae0:	d146      	bne.n	8000b70 <__udivmoddi4+0x150>
 8000ae2:	42a3      	cmp	r3, r4
 8000ae4:	d302      	bcc.n	8000aec <__udivmoddi4+0xcc>
 8000ae6:	4290      	cmp	r0, r2
 8000ae8:	f0c0 80f0 	bcc.w	8000ccc <__udivmoddi4+0x2ac>
 8000aec:	1a86      	subs	r6, r0, r2
 8000aee:	eb64 0303 	sbc.w	r3, r4, r3
 8000af2:	2001      	movs	r0, #1
 8000af4:	2d00      	cmp	r5, #0
 8000af6:	d0e6      	beq.n	8000ac6 <__udivmoddi4+0xa6>
 8000af8:	e9c5 6300 	strd	r6, r3, [r5]
 8000afc:	e7e3      	b.n	8000ac6 <__udivmoddi4+0xa6>
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	f040 8090 	bne.w	8000c24 <__udivmoddi4+0x204>
 8000b04:	eba1 040c 	sub.w	r4, r1, ip
 8000b08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b0c:	fa1f f78c 	uxth.w	r7, ip
 8000b10:	2101      	movs	r1, #1
 8000b12:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b22:	fb07 f006 	mul.w	r0, r7, r6
 8000b26:	4298      	cmp	r0, r3
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x11c>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b32:	d202      	bcs.n	8000b3a <__udivmoddi4+0x11a>
 8000b34:	4298      	cmp	r0, r3
 8000b36:	f200 80cd 	bhi.w	8000cd4 <__udivmoddi4+0x2b4>
 8000b3a:	4626      	mov	r6, r4
 8000b3c:	1a1c      	subs	r4, r3, r0
 8000b3e:	fa1f f38e 	uxth.w	r3, lr
 8000b42:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b46:	fb08 4410 	mls	r4, r8, r0, r4
 8000b4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b4e:	fb00 f707 	mul.w	r7, r0, r7
 8000b52:	429f      	cmp	r7, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x148>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x146>
 8000b60:	429f      	cmp	r7, r3
 8000b62:	f200 80b0 	bhi.w	8000cc6 <__udivmoddi4+0x2a6>
 8000b66:	4620      	mov	r0, r4
 8000b68:	1bdb      	subs	r3, r3, r7
 8000b6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6e:	e7a5      	b.n	8000abc <__udivmoddi4+0x9c>
 8000b70:	f1c1 0620 	rsb	r6, r1, #32
 8000b74:	408b      	lsls	r3, r1
 8000b76:	fa22 f706 	lsr.w	r7, r2, r6
 8000b7a:	431f      	orrs	r7, r3
 8000b7c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b80:	fa04 f301 	lsl.w	r3, r4, r1
 8000b84:	ea43 030c 	orr.w	r3, r3, ip
 8000b88:	40f4      	lsrs	r4, r6
 8000b8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b8e:	0c38      	lsrs	r0, r7, #16
 8000b90:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b94:	fbb4 fef0 	udiv	lr, r4, r0
 8000b98:	fa1f fc87 	uxth.w	ip, r7
 8000b9c:	fb00 441e 	mls	r4, r0, lr, r4
 8000ba0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba4:	fb0e f90c 	mul.w	r9, lr, ip
 8000ba8:	45a1      	cmp	r9, r4
 8000baa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bae:	d90a      	bls.n	8000bc6 <__udivmoddi4+0x1a6>
 8000bb0:	193c      	adds	r4, r7, r4
 8000bb2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bb6:	f080 8084 	bcs.w	8000cc2 <__udivmoddi4+0x2a2>
 8000bba:	45a1      	cmp	r9, r4
 8000bbc:	f240 8081 	bls.w	8000cc2 <__udivmoddi4+0x2a2>
 8000bc0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bc4:	443c      	add	r4, r7
 8000bc6:	eba4 0409 	sub.w	r4, r4, r9
 8000bca:	fa1f f983 	uxth.w	r9, r3
 8000bce:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bd2:	fb00 4413 	mls	r4, r0, r3, r4
 8000bd6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bda:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	d907      	bls.n	8000bf2 <__udivmoddi4+0x1d2>
 8000be2:	193c      	adds	r4, r7, r4
 8000be4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000be8:	d267      	bcs.n	8000cba <__udivmoddi4+0x29a>
 8000bea:	45a4      	cmp	ip, r4
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0x29a>
 8000bee:	3b02      	subs	r3, #2
 8000bf0:	443c      	add	r4, r7
 8000bf2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bf6:	fba0 9302 	umull	r9, r3, r0, r2
 8000bfa:	eba4 040c 	sub.w	r4, r4, ip
 8000bfe:	429c      	cmp	r4, r3
 8000c00:	46ce      	mov	lr, r9
 8000c02:	469c      	mov	ip, r3
 8000c04:	d351      	bcc.n	8000caa <__udivmoddi4+0x28a>
 8000c06:	d04e      	beq.n	8000ca6 <__udivmoddi4+0x286>
 8000c08:	b155      	cbz	r5, 8000c20 <__udivmoddi4+0x200>
 8000c0a:	ebb8 030e 	subs.w	r3, r8, lr
 8000c0e:	eb64 040c 	sbc.w	r4, r4, ip
 8000c12:	fa04 f606 	lsl.w	r6, r4, r6
 8000c16:	40cb      	lsrs	r3, r1
 8000c18:	431e      	orrs	r6, r3
 8000c1a:	40cc      	lsrs	r4, r1
 8000c1c:	e9c5 6400 	strd	r6, r4, [r5]
 8000c20:	2100      	movs	r1, #0
 8000c22:	e750      	b.n	8000ac6 <__udivmoddi4+0xa6>
 8000c24:	f1c2 0320 	rsb	r3, r2, #32
 8000c28:	fa20 f103 	lsr.w	r1, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	fa24 f303 	lsr.w	r3, r4, r3
 8000c34:	4094      	lsls	r4, r2
 8000c36:	430c      	orrs	r4, r1
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c40:	fa1f f78c 	uxth.w	r7, ip
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3110 	mls	r1, r8, r0, r3
 8000c4c:	0c23      	lsrs	r3, r4, #16
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb00 f107 	mul.w	r1, r0, r7
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d908      	bls.n	8000c6c <__udivmoddi4+0x24c>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c62:	d22c      	bcs.n	8000cbe <__udivmoddi4+0x29e>
 8000c64:	4299      	cmp	r1, r3
 8000c66:	d92a      	bls.n	8000cbe <__udivmoddi4+0x29e>
 8000c68:	3802      	subs	r0, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c74:	fb08 3311 	mls	r3, r8, r1, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb01 f307 	mul.w	r3, r1, r7
 8000c80:	42a3      	cmp	r3, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x276>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c8c:	d213      	bcs.n	8000cb6 <__udivmoddi4+0x296>
 8000c8e:	42a3      	cmp	r3, r4
 8000c90:	d911      	bls.n	8000cb6 <__udivmoddi4+0x296>
 8000c92:	3902      	subs	r1, #2
 8000c94:	4464      	add	r4, ip
 8000c96:	1ae4      	subs	r4, r4, r3
 8000c98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c9c:	e739      	b.n	8000b12 <__udivmoddi4+0xf2>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	e6f0      	b.n	8000a84 <__udivmoddi4+0x64>
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e706      	b.n	8000ab4 <__udivmoddi4+0x94>
 8000ca6:	45c8      	cmp	r8, r9
 8000ca8:	d2ae      	bcs.n	8000c08 <__udivmoddi4+0x1e8>
 8000caa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cae:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cb2:	3801      	subs	r0, #1
 8000cb4:	e7a8      	b.n	8000c08 <__udivmoddi4+0x1e8>
 8000cb6:	4631      	mov	r1, r6
 8000cb8:	e7ed      	b.n	8000c96 <__udivmoddi4+0x276>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	e799      	b.n	8000bf2 <__udivmoddi4+0x1d2>
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	e7d4      	b.n	8000c6c <__udivmoddi4+0x24c>
 8000cc2:	46d6      	mov	lr, sl
 8000cc4:	e77f      	b.n	8000bc6 <__udivmoddi4+0x1a6>
 8000cc6:	4463      	add	r3, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	e74d      	b.n	8000b68 <__udivmoddi4+0x148>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	4623      	mov	r3, r4
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e70f      	b.n	8000af4 <__udivmoddi4+0xd4>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	e730      	b.n	8000b3c <__udivmoddi4+0x11c>
 8000cda:	bf00      	nop

08000cdc <__aeabi_idiv0>:
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000ce0:	b4b0      	push	{r4, r5, r7}
 8000ce2:	b08f      	sub	sp, #60	@ 0x3c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000ce8:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000d00:	23ff      	movs	r3, #255	@ 0xff
 8000d02:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000d06:	2364      	movs	r3, #100	@ 0x64
 8000d08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	461d      	mov	r5, r3
 8000d14:	f107 040c 	add.w	r4, r7, #12
 8000d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000d24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	373c      	adds	r7, #60	@ 0x3c
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bcb0      	pop	{r4, r5, r7}
 8000d30:	4770      	bx	lr

08000d32 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f000 f9ff 	bl	8001142 <LoRa_read>
 8000d44:	4603      	mov	r3, r0
 8000d46:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000d48:	7bbb      	ldrb	r3, [r7, #14]
 8000d4a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d107      	bne.n	8000d62 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000d52:	7bbb      	ldrb	r3, [r7, #14]
 8000d54:	f023 0307 	bic.w	r3, r3, #7
 8000d58:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
 8000d60:	e03e      	b.n	8000de0 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d10c      	bne.n	8000d82 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d6c:	f023 0307 	bic.w	r3, r3, #7
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	61da      	str	r2, [r3, #28]
 8000d80:	e02e      	b.n	8000de0 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d10c      	bne.n	8000da2 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d8c:	f023 0307 	bic.w	r3, r3, #7
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	f043 0303 	orr.w	r3, r3, #3
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	61da      	str	r2, [r3, #28]
 8000da0:	e01e      	b.n	8000de0 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d10c      	bne.n	8000dc2 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dac:	f023 0307 	bic.w	r3, r3, #7
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	f043 0305 	orr.w	r3, r3, #5
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2205      	movs	r2, #5
 8000dbe:	61da      	str	r2, [r3, #28]
 8000dc0:	e00e      	b.n	8000de0 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	2b06      	cmp	r3, #6
 8000dc6:	d10b      	bne.n	8000de0 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dcc:	f023 0307 	bic.w	r3, r3, #7
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	f043 0306 	orr.w	r3, r3, #6
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2206      	movs	r2, #6
 8000dde:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	461a      	mov	r2, r3
 8000de4:	2101      	movs	r1, #1
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 f9c5 	bl	8001176 <LoRa_write>
	//HAL_Delay(10);
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	4613      	mov	r3, r2
 8000e02:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	889b      	ldrh	r3, [r3, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f001 f8aa 	bl	8001f68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	6998      	ldr	r0, [r3, #24]
 8000e18:	88fa      	ldrh	r2, [r7, #6]
 8000e1a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e1e:	68b9      	ldr	r1, [r7, #8]
 8000e20:	f001 fd75 	bl	800290e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e24:	bf00      	nop
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 f975 	bl	800311a <HAL_SPI_GetState>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d1f7      	bne.n	8000e26 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6998      	ldr	r0, [r3, #24]
 8000e3a:	8b3a      	ldrh	r2, [r7, #24]
 8000e3c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	f001 fea8 	bl	8002b96 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e46:	bf00      	nop
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 f964 	bl	800311a <HAL_SPI_GetState>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d1f7      	bne.n	8000e48 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6818      	ldr	r0, [r3, #0]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	889b      	ldrh	r3, [r3, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	4619      	mov	r1, r3
 8000e64:	f001 f880 	bl	8001f68 <HAL_GPIO_WritePin>
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	889b      	ldrh	r3, [r3, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f001 f86c 	bl	8001f68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6998      	ldr	r0, [r3, #24]
 8000e94:	88fa      	ldrh	r2, [r7, #6]
 8000e96:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e9a:	68b9      	ldr	r1, [r7, #8]
 8000e9c:	f001 fd37 	bl	800290e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ea0:	bf00      	nop
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 f937 	bl	800311a <HAL_SPI_GetState>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d1f7      	bne.n	8000ea2 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6998      	ldr	r0, [r3, #24]
 8000eb6:	8b3a      	ldrh	r2, [r7, #24]
 8000eb8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ebc:	6839      	ldr	r1, [r7, #0]
 8000ebe:	f001 fd26 	bl	800290e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ec2:	bf00      	nop
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 f926 	bl	800311a <HAL_SPI_GetState>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d1f7      	bne.n	8000ec4 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	889b      	ldrh	r3, [r3, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f001 f842 	bl	8001f68 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000ef8:	2126      	movs	r1, #38	@ 0x26
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f921 	bl	8001142 <LoRa_read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e003      	b.n	8000f1c <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000f14:	7bbb      	ldrb	r3, [r7, #14]
 8000f16:	f023 0308 	bic.w	r3, r3, #8
 8000f1a:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2126      	movs	r1, #38	@ 0x26
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f927 	bl	8001176 <LoRa_write>
	HAL_Delay(10);
 8000f28:	200a      	movs	r0, #10
 8000f2a:	f000 fd97 	bl	8001a5c <HAL_Delay>
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b096      	sub	sp, #88	@ 0x58
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000f40:	4a17      	ldr	r2, [pc, #92]	@ (8000fa0 <LoRa_setAutoLDO+0x68>)
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4611      	mov	r1, r2
 8000f48:	2250      	movs	r2, #80	@ 0x50
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fa62 	bl	8003414 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f56:	461a      	mov	r2, r3
 8000f58:	2301      	movs	r3, #1
 8000f5a:	4093      	lsls	r3, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff faa3 	bl	80004a8 <__aeabi_i2d>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	3358      	adds	r3, #88	@ 0x58
 8000f6c:	443b      	add	r3, r7
 8000f6e:	3b50      	subs	r3, #80	@ 0x50
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f7ff fc2c 	bl	80007d0 <__aeabi_ddiv>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fd0e 	bl	80009a0 <__aeabi_d2iz>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b10      	cmp	r3, #16
 8000f88:	bfcc      	ite	gt
 8000f8a:	2301      	movgt	r3, #1
 8000f8c:	2300      	movle	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4619      	mov	r1, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffaa 	bl	8000eec <LoRa_setLowDaraRateOptimization>
}
 8000f98:	bf00      	nop
 8000f9a:	3758      	adds	r7, #88	@ 0x58
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	08003448 	.word	0x08003448

08000fa4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	04db      	lsls	r3, r3, #19
 8000fb2:	115b      	asrs	r3, r3, #5
 8000fb4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	0c1b      	lsrs	r3, r3, #16
 8000fba:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000fbc:	7afb      	ldrb	r3, [r7, #11]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2106      	movs	r1, #6
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f8d7 	bl	8001176 <LoRa_write>
	HAL_Delay(5);
 8000fc8:	2005      	movs	r0, #5
 8000fca:	f000 fd47 	bl	8001a5c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000fd4:	7afb      	ldrb	r3, [r7, #11]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	2107      	movs	r1, #7
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f8cb 	bl	8001176 <LoRa_write>
	HAL_Delay(5);
 8000fe0:	2005      	movs	r0, #5
 8000fe2:	f000 fd3b 	bl	8001a5c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000fea:	7afb      	ldrb	r3, [r7, #11]
 8000fec:	461a      	mov	r2, r3
 8000fee:	2108      	movs	r1, #8
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f8c0 	bl	8001176 <LoRa_write>
	HAL_Delay(5);
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	f000 fd30 	bl	8001a5c <HAL_Delay>
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2b0c      	cmp	r3, #12
 8001012:	dd01      	ble.n	8001018 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001014:	230c      	movs	r3, #12
 8001016:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b06      	cmp	r3, #6
 800101c:	dc01      	bgt.n	8001022 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800101e:	2307      	movs	r3, #7
 8001020:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001022:	211e      	movs	r1, #30
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f88c 	bl	8001142 <LoRa_read>
 800102a:	4603      	mov	r3, r0
 800102c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f000 fd14 	bl	8001a5c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	b2da      	uxtb	r2, r3
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4413      	add	r3, r2
 8001046:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	461a      	mov	r2, r3
 800104c:	211e      	movs	r1, #30
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f891 	bl	8001176 <LoRa_write>
	HAL_Delay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f000 fd01 	bl	8001a5c <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff6c 	bl	8000f38 <LoRa_setAutoLDO>
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	461a      	mov	r2, r3
 8001078:	2109      	movs	r1, #9
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f87b 	bl	8001176 <LoRa_write>
	HAL_Delay(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f000 fceb 	bl	8001a5c <HAL_Delay>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	2b2c      	cmp	r3, #44	@ 0x2c
 80010a4:	d801      	bhi.n	80010aa <LoRa_setOCP+0x1a>
		current = 45;
 80010a6:	232d      	movs	r3, #45	@ 0x2d
 80010a8:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	2bf0      	cmp	r3, #240	@ 0xf0
 80010ae:	d901      	bls.n	80010b4 <LoRa_setOCP+0x24>
		current = 240;
 80010b0:	23f0      	movs	r3, #240	@ 0xf0
 80010b2:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	2b78      	cmp	r3, #120	@ 0x78
 80010b8:	d809      	bhi.n	80010ce <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	3b2d      	subs	r3, #45	@ 0x2d
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <LoRa_setOCP+0x78>)
 80010c0:	fb82 1203 	smull	r1, r2, r2, r3
 80010c4:	1052      	asrs	r2, r2, #1
 80010c6:	17db      	asrs	r3, r3, #31
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e00b      	b.n	80010e6 <LoRa_setOCP+0x56>
	else if(current <= 240)
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	2bf0      	cmp	r3, #240	@ 0xf0
 80010d2:	d808      	bhi.n	80010e6 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	331e      	adds	r3, #30
 80010d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <LoRa_setOCP+0x78>)
 80010da:	fb82 1203 	smull	r1, r2, r2, r3
 80010de:	1092      	asrs	r2, r2, #2
 80010e0:	17db      	asrs	r3, r3, #31
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	3320      	adds	r3, #32
 80010ea:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	461a      	mov	r2, r3
 80010f0:	210b      	movs	r1, #11
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f83f 	bl	8001176 <LoRa_write>
	HAL_Delay(10);
 80010f8:	200a      	movs	r0, #10
 80010fa:	f000 fcaf 	bl	8001a5c <HAL_Delay>
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	66666667 	.word	0x66666667

0800110c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001114:	211e      	movs	r1, #30
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f813 	bl	8001142 <LoRa_read>
 800111c:	4603      	mov	r3, r0
 800111e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	f043 0307 	orr.w	r3, r3, #7
 8001126:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	461a      	mov	r2, r3
 800112c:	211e      	movs	r1, #30
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f821 	bl	8001176 <LoRa_write>
	HAL_Delay(10);
 8001134:	200a      	movs	r0, #10
 8001136:	f000 fc91 	bl	8001a5c <HAL_Delay>
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af02      	add	r7, sp, #8
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	460b      	mov	r3, r1
 800114c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001154:	b2db      	uxtb	r3, r3
 8001156:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001158:	f107 030f 	add.w	r3, r7, #15
 800115c:	f107 010e 	add.w	r1, r7, #14
 8001160:	2201      	movs	r2, #1
 8001162:	9200      	str	r2, [sp, #0]
 8001164:	2201      	movs	r2, #1
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fe44 	bl	8000df4 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af02      	add	r7, sp, #8
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	70fb      	strb	r3, [r7, #3]
 8001182:	4613      	mov	r3, r2
 8001184:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800118c:	b2db      	uxtb	r3, r3
 800118e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001190:	78bb      	ldrb	r3, [r7, #2]
 8001192:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001194:	f107 030f 	add.w	r3, r7, #15
 8001198:	f107 010e 	add.w	r1, r7, #14
 800119c:	2201      	movs	r2, #1
 800119e:	9200      	str	r2, [sp, #0]
 80011a0:	2201      	movs	r2, #1
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fe64 	bl	8000e70 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	461a      	mov	r2, r3
 80011bc:	460b      	mov	r3, r1
 80011be:	72fb      	strb	r3, [r7, #11]
 80011c0:	4613      	mov	r3, r2
 80011c2:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	889b      	ldrh	r3, [r3, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	4619      	mov	r1, r3
 80011da:	f000 fec5 	bl	8001f68 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6998      	ldr	r0, [r3, #24]
 80011e2:	f107 0117 	add.w	r1, r7, #23
 80011e6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011ea:	2201      	movs	r2, #1
 80011ec:	f001 fb8f 	bl	800290e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011f0:	bf00      	nop
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 ff8f 	bl	800311a <HAL_SPI_GetState>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d1f7      	bne.n	80011f2 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6998      	ldr	r0, [r3, #24]
 8001206:	7abb      	ldrb	r3, [r7, #10]
 8001208:	b29a      	uxth	r2, r3
 800120a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f001 fb7d 	bl	800290e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001214:	bf00      	nop
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4618      	mov	r0, r3
 800121c:	f001 ff7d 	bl	800311a <HAL_SPI_GetState>
 8001220:	4603      	mov	r3, r0
 8001222:	2b01      	cmp	r3, #1
 8001224:	d1f7      	bne.n	8001216 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	4619      	mov	r1, r3
 8001232:	f000 fe99 	bl	8001f68 <HAL_GPIO_WritePin>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]

	return 1;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	460b      	mov	r3, r1
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	4613      	mov	r3, r2
 8001268:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001270:	2101      	movs	r1, #1
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f7ff fd5d 	bl	8000d32 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001278:	210e      	movs	r1, #14
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f7ff ff61 	bl	8001142 <LoRa_read>
 8001280:	4603      	mov	r3, r0
 8001282:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001284:	7cfb      	ldrb	r3, [r7, #19]
 8001286:	461a      	mov	r2, r3
 8001288:	210d      	movs	r1, #13
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff ff73 	bl	8001176 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	461a      	mov	r2, r3
 8001294:	2122      	movs	r1, #34	@ 0x22
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff ff6d 	bl	8001176 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	2100      	movs	r1, #0
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff ff84 	bl	80011b0 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80012a8:	2103      	movs	r1, #3
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff fd41 	bl	8000d32 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80012b0:	2112      	movs	r1, #18
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff ff45 	bl	8001142 <LoRa_read>
 80012b8:	4603      	mov	r3, r0
 80012ba:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80012bc:	7cfb      	ldrb	r3, [r7, #19]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00a      	beq.n	80012dc <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80012c6:	22ff      	movs	r2, #255	@ 0xff
 80012c8:	2112      	movs	r1, #18
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f7ff ff53 	bl	8001176 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80012d0:	6979      	ldr	r1, [r7, #20]
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f7ff fd2d 	bl	8000d32 <LoRa_gotoMode>
			return 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	e00f      	b.n	80012fc <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	80bb      	strh	r3, [r7, #4]
 80012e2:	88bb      	ldrh	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d105      	bne.n	80012f4 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80012e8:	6979      	ldr	r1, [r7, #20]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7ff fd21 	bl	8000d32 <LoRa_gotoMode>
				return 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e003      	b.n	80012fc <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f000 fbb1 	bl	8001a5c <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80012fa:	e7d9      	b.n	80012b0 <LoRa_transmit+0x5c>
	}
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800130c:	2105      	movs	r1, #5
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fd0f 	bl	8000d32 <LoRa_gotoMode>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff8a 	bl	800123e <LoRa_isvalid>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8096 	beq.w	800145e <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001332:	2100      	movs	r1, #0
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff fcfc 	bl	8000d32 <LoRa_gotoMode>
			HAL_Delay(10);
 800133a:	200a      	movs	r0, #10
 800133c:	f000 fb8e 	bl	8001a5c <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001340:	2101      	movs	r1, #1
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fefd 	bl	8001142 <LoRa_read>
 8001348:	4603      	mov	r3, r0
 800134a:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800134c:	200a      	movs	r0, #10
 800134e:	f000 fb85 	bl	8001a5c <HAL_Delay>
			data = read | 0x80;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001358:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	461a      	mov	r2, r3
 800135e:	2101      	movs	r1, #1
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff08 	bl	8001176 <LoRa_write>
			HAL_Delay(100);
 8001366:	2064      	movs	r0, #100	@ 0x64
 8001368:	f000 fb78 	bl	8001a5c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	4619      	mov	r1, r3
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fe16 	bl	8000fa4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800137e:	4619      	mov	r1, r3
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fe71 	bl	8001068 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800138c:	4619      	mov	r1, r3
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fe7e 	bl	8001090 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001394:	2223      	movs	r2, #35	@ 0x23
 8001396:	210c      	movs	r1, #12
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff feec 	bl	8001176 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff feb4 	bl	800110c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff fe29 	bl	8001004 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80013b2:	22ff      	movs	r2, #255	@ 0xff
 80013b4:	211f      	movs	r1, #31
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fedd 	bl	8001176 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80013d8:	7bbb      	ldrb	r3, [r7, #14]
 80013da:	461a      	mov	r2, r3
 80013dc:	211d      	movs	r1, #29
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fec9 	bl	8001176 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fda7 	bl	8000f38 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	2120      	movs	r1, #32
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff febc 	bl	8001176 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	2121      	movs	r1, #33	@ 0x21
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff feb4 	bl	8001176 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800140e:	2140      	movs	r1, #64	@ 0x40
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fe96 	bl	8001142 <LoRa_read>
 8001416:	4603      	mov	r3, r0
 8001418:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001420:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	461a      	mov	r2, r3
 8001426:	2140      	movs	r1, #64	@ 0x40
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff fea4 	bl	8001176 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800142e:	2101      	movs	r1, #1
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fc7e 	bl	8000d32 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800143c:	200a      	movs	r0, #10
 800143e:	f000 fb0d 	bl	8001a5c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001442:	2142      	movs	r1, #66	@ 0x42
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff fe7c 	bl	8001142 <LoRa_read>
 800144a:	4603      	mov	r3, r0
 800144c:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	2b12      	cmp	r3, #18
 8001452:	d101      	bne.n	8001458 <LoRa_init+0x13c>
				return LORA_OK;
 8001454:	23c8      	movs	r3, #200	@ 0xc8
 8001456:	e004      	b.n	8001462 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001458:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 800145c:	e001      	b.n	8001462 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 800145e:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b5b0      	push	{r4, r5, r7, lr}
 800146e:	b0ac      	sub	sp, #176	@ 0xb0
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001472:	f000 fa81 	bl	8001978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001476:	f000 f87b 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147a:	f000 f919 	bl	80016b0 <MX_GPIO_Init>
  MX_SPI3_Init();
 800147e:	f000 f8e1 	bl	8001644 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  myLoRa = newLoRa();
 8001482:	4c34      	ldr	r4, [pc, #208]	@ (8001554 <main+0xe8>)
 8001484:	463b      	mov	r3, r7
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fc2a 	bl	8000ce0 <newLoRa>
 800148c:	4625      	mov	r5, r4
 800148e:	463c      	mov	r4, r7
 8001490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001498:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800149c:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 80014a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001554 <main+0xe8>)
 80014a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001558 <main+0xec>)
 80014a4:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 80014a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001554 <main+0xe8>)
 80014a8:	2210      	movs	r2, #16
 80014aa:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 80014ac:	4b29      	ldr	r3, [pc, #164]	@ (8001554 <main+0xe8>)
 80014ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001558 <main+0xec>)
 80014b0:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 80014b2:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <main+0xe8>)
 80014b4:	2220      	movs	r2, #32
 80014b6:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 80014b8:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <main+0xe8>)
 80014ba:	4a28      	ldr	r2, [pc, #160]	@ (800155c <main+0xf0>)
 80014bc:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 80014be:	4b25      	ldr	r3, [pc, #148]	@ (8001554 <main+0xe8>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi3;
 80014c4:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <main+0xe8>)
 80014c6:	4a26      	ldr	r2, [pc, #152]	@ (8001560 <main+0xf4>)
 80014c8:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 80014ca:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <main+0xe8>)
 80014cc:	f240 12b1 	movw	r2, #433	@ 0x1b1
 80014d0:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 80014d2:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <main+0xe8>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_31_25KHz;       // default = BW_125KHz
 80014da:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <main+0xe8>)
 80014dc:	2204      	movs	r2, #4
 80014de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <main+0xe8>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <main+0xe8>)
 80014ec:	22ff      	movs	r2, #255	@ 0xff
 80014ee:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <main+0xe8>)
 80014f4:	2282      	movs	r2, #130	@ 0x82
 80014f6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 9;              // default = 8;
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <main+0xe8>)
 80014fc:	2209      	movs	r2, #9
 80014fe:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa)==LORA_OK){
 8001500:	4814      	ldr	r0, [pc, #80]	@ (8001554 <main+0xe8>)
 8001502:	f7ff ff0b 	bl	800131c <LoRa_init>
 8001506:	4603      	mov	r3, r0
 8001508:	2bc8      	cmp	r3, #200	@ 0xc8
 800150a:	d102      	bne.n	8001512 <main+0xa6>

	  LoRa_stat = 1;
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <main+0xf8>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]

  }

  LoRa_startReceiving(&myLoRa);
 8001512:	4810      	ldr	r0, [pc, #64]	@ (8001554 <main+0xe8>)
 8001514:	f7ff fef6 	bl	8001304 <LoRa_startReceiving>

  uint8_t TxBuffer[128];
  TxBuffer[0] = 45;
 8001518:	232d      	movs	r3, #45	@ 0x2d
 800151a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  TxBuffer[1] = 0x12;
 800151e:	2312      	movs	r3, #18
 8001520:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  TxBuffer[2] = 'G';
 8001524:	2347      	movs	r3, #71	@ 0x47
 8001526:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

  LoRa_transmit(&myLoRa,TxBuffer,3,500);
 800152a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800152e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001532:	2203      	movs	r2, #3
 8001534:	4807      	ldr	r0, [pc, #28]	@ (8001554 <main+0xe8>)
 8001536:	f7ff fe8d 	bl	8001254 <LoRa_transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  send_data = "Hello world!";
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <main+0xfc>)
 800153c:	4a0b      	ldr	r2, [pc, #44]	@ (800156c <main+0x100>)
 800153e:	601a      	str	r2, [r3, #0]
	  LoRa_transmit(&myLoRa, (uint8_t*)send_data, 12, 100);
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <main+0xfc>)
 8001542:	6819      	ldr	r1, [r3, #0]
 8001544:	2364      	movs	r3, #100	@ 0x64
 8001546:	220c      	movs	r2, #12
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <main+0xe8>)
 800154a:	f7ff fe83 	bl	8001254 <LoRa_transmit>
	  send_data = "Hello world!";
 800154e:	bf00      	nop
 8001550:	e7f3      	b.n	800153a <main+0xce>
 8001552:	bf00      	nop
 8001554:	20000084 	.word	0x20000084
 8001558:	40020800 	.word	0x40020800
 800155c:	40020400 	.word	0x40020400
 8001560:	2000002c 	.word	0x2000002c
 8001564:	200000b0 	.word	0x200000b0
 8001568:	20000028 	.word	0x20000028
 800156c:	08003498 	.word	0x08003498

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b094      	sub	sp, #80	@ 0x50
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	2234      	movs	r2, #52	@ 0x34
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f001 ff1c 	bl	80033bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	4b28      	ldr	r3, [pc, #160]	@ (800163c <SystemClock_Config+0xcc>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159c:	4a27      	ldr	r2, [pc, #156]	@ (800163c <SystemClock_Config+0xcc>)
 800159e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a4:	4b25      	ldr	r3, [pc, #148]	@ (800163c <SystemClock_Config+0xcc>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b0:	2300      	movs	r3, #0
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <SystemClock_Config+0xd0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a21      	ldr	r2, [pc, #132]	@ (8001640 <SystemClock_Config+0xd0>)
 80015ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <SystemClock_Config+0xd0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d4:	2310      	movs	r3, #16
 80015d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d8:	2302      	movs	r3, #2
 80015da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015dc:	2300      	movs	r3, #0
 80015de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015e0:	2308      	movs	r3, #8
 80015e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80015e4:	2348      	movs	r3, #72	@ 0x48
 80015e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fe7b 	bl	80022f4 <HAL_RCC_OscConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001604:	f000 f8b4 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001608:	230f      	movs	r3, #15
 800160a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160c:	2302      	movs	r3, #2
 800160e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	2102      	movs	r1, #2
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fcb9 	bl	8001f9c <HAL_RCC_ClockConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001630:	f000 f89e 	bl	8001770 <Error_Handler>
  }
}
 8001634:	bf00      	nop
 8001636:	3750      	adds	r7, #80	@ 0x50
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	40007000 	.word	0x40007000

08001644 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001648:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <MX_SPI3_Init+0x64>)
 800164a:	4a18      	ldr	r2, [pc, #96]	@ (80016ac <MX_SPI3_Init+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800164e:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <MX_SPI3_Init+0x64>)
 8001650:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001654:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001656:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <MX_SPI3_Init+0x64>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <MX_SPI3_Init+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MX_SPI3_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <MX_SPI3_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800166e:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <MX_SPI3_Init+0x64>)
 8001670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001674:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001676:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <MX_SPI3_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800167c:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <MX_SPI3_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <MX_SPI3_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001688:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <MX_SPI3_Init+0x64>)
 800168a:	2200      	movs	r2, #0
 800168c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <MX_SPI3_Init+0x64>)
 8001690:	220a      	movs	r2, #10
 8001692:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001694:	4804      	ldr	r0, [pc, #16]	@ (80016a8 <MX_SPI3_Init+0x64>)
 8001696:	f001 f8b1 	bl	80027fc <HAL_SPI_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80016a0:	f000 f866 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2000002c 	.word	0x2000002c
 80016ac:	40003c00 	.word	0x40003c00

080016b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b26      	ldr	r3, [pc, #152]	@ (8001764 <MX_GPIO_Init+0xb4>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a25      	ldr	r2, [pc, #148]	@ (8001764 <MX_GPIO_Init+0xb4>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <MX_GPIO_Init+0xb4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <MX_GPIO_Init+0xb4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001764 <MX_GPIO_Init+0xb4>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <MX_GPIO_Init+0xb4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <MX_GPIO_Init+0xb4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <MX_GPIO_Init+0xb4>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <MX_GPIO_Init+0xb4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NSS_Pin|RST_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	2130      	movs	r1, #48	@ 0x30
 800171e:	4812      	ldr	r0, [pc, #72]	@ (8001768 <MX_GPIO_Init+0xb8>)
 8001720:	f000 fc22 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8001724:	2330      	movs	r3, #48	@ 0x30
 8001726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4619      	mov	r1, r3
 800173a:	480b      	ldr	r0, [pc, #44]	@ (8001768 <MX_GPIO_Init+0xb8>)
 800173c:	f000 fa98 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001740:	2301      	movs	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001744:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_GPIO_Init+0xbc>)
 8001756:	f000 fa8b 	bl	8001c70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800175a:	bf00      	nop
 800175c:	3720      	adds	r7, #32
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40020800 	.word	0x40020800
 800176c:	40020400 	.word	0x40020400

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <Error_Handler+0x8>

0800177c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <HAL_MspInit+0x4c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	4a0f      	ldr	r2, [pc, #60]	@ (80017c8 <HAL_MspInit+0x4c>)
 800178c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001790:	6453      	str	r3, [r2, #68]	@ 0x44
 8001792:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <HAL_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <HAL_MspInit+0x4c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_MspInit+0x4c>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800

080017cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a29      	ldr	r2, [pc, #164]	@ (8001890 <HAL_SPI_MspInit+0xc4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d14b      	bne.n	8001886 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b28      	ldr	r3, [pc, #160]	@ (8001894 <HAL_SPI_MspInit+0xc8>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	4a27      	ldr	r2, [pc, #156]	@ (8001894 <HAL_SPI_MspInit+0xc8>)
 80017f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fe:	4b25      	ldr	r3, [pc, #148]	@ (8001894 <HAL_SPI_MspInit+0xc8>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <HAL_SPI_MspInit+0xc8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a20      	ldr	r2, [pc, #128]	@ (8001894 <HAL_SPI_MspInit+0xc8>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <HAL_SPI_MspInit+0xc8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <HAL_SPI_MspInit+0xc8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a19      	ldr	r2, [pc, #100]	@ (8001894 <HAL_SPI_MspInit+0xc8>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <HAL_SPI_MspInit+0xc8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001842:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001854:	2307      	movs	r3, #7
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	480e      	ldr	r0, [pc, #56]	@ (8001898 <HAL_SPI_MspInit+0xcc>)
 8001860:	f000 fa06 	bl	8001c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001864:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001876:	2306      	movs	r3, #6
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4806      	ldr	r0, [pc, #24]	@ (800189c <HAL_SPI_MspInit+0xd0>)
 8001882:	f000 f9f5 	bl	8001c70 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	@ 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40003c00 	.word	0x40003c00
 8001894:	40023800 	.word	0x40023800
 8001898:	40020400 	.word	0x40020400
 800189c:	40020800 	.word	0x40020800

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <NMI_Handler+0x4>

080018a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <MemManage_Handler+0x4>

080018b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <BusFault_Handler+0x4>

080018c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <UsageFault_Handler+0x4>

080018c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f6:	f000 f891 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <SystemInit+0x20>)
 8001906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800190a:	4a05      	ldr	r2, [pc, #20]	@ (8001920 <SystemInit+0x20>)
 800190c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800195c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001928:	f7ff ffea 	bl	8001900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800192c:	480c      	ldr	r0, [pc, #48]	@ (8001960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192e:	490d      	ldr	r1, [pc, #52]	@ (8001964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001930:	4a0d      	ldr	r2, [pc, #52]	@ (8001968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001944:	4c0a      	ldr	r4, [pc, #40]	@ (8001970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001952:	f001 fd3b 	bl	80033cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001956:	f7ff fd89 	bl	800146c <main>
  bx  lr    
 800195a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800195c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001964:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001968:	080034c8 	.word	0x080034c8
  ldr r2, =_sbss
 800196c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001970:	200000b8 	.word	0x200000b8

08001974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC_IRQHandler>
	...

08001978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800197c:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <HAL_Init+0x40>)
 8001982:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001986:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001988:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <HAL_Init+0x40>)
 800198e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001992:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a07      	ldr	r2, [pc, #28]	@ (80019b8 <HAL_Init+0x40>)
 800199a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a0:	2003      	movs	r0, #3
 80019a2:	f000 f931 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a6:	200f      	movs	r0, #15
 80019a8:	f000 f808 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ac:	f7ff fee6 	bl	800177c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023c00 	.word	0x40023c00

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_InitTick+0x54>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_InitTick+0x58>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f93b 	bl	8001c56 <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d80a      	bhi.n	8001a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f000 f911 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019fc:	4a06      	ldr	r2, [pc, #24]	@ (8001a18 <HAL_InitTick+0x5c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000008 	.word	0x20000008
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	200000b4 	.word	0x200000b4

08001a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <HAL_GetTick+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	200000b4 	.word	0x200000b4

08001a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff ffee 	bl	8001a44 <HAL_GetTick>
 8001a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d005      	beq.n	8001a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a76:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <HAL_Delay+0x44>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a82:	bf00      	nop
 8001a84:	f7ff ffde 	bl	8001a44 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f7      	bhi.n	8001a84 <HAL_Delay+0x28>
  {
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000008 	.word	0x20000008

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	60d3      	str	r3, [r2, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	@ (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	@ (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	@ 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f7ff ff8e 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff47 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff5c 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff8e 	bl	8001b5c <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5d 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffb0 	bl	8001bc4 <SysTick_Config>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	e153      	b.n	8001f34 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	f040 8142 	bne.w	8001f2e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d005      	beq.n	8001cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d130      	bne.n	8001d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 0201 	and.w	r2, r3, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d017      	beq.n	8001d60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d123      	bne.n	8001db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	08da      	lsrs	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3208      	adds	r2, #8
 8001d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	69b9      	ldr	r1, [r7, #24]
 8001db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 809c 	beq.w	8001f2e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b54      	ldr	r3, [pc, #336]	@ (8001f4c <HAL_GPIO_Init+0x2dc>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	4a53      	ldr	r2, [pc, #332]	@ (8001f4c <HAL_GPIO_Init+0x2dc>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e06:	4b51      	ldr	r3, [pc, #324]	@ (8001f4c <HAL_GPIO_Init+0x2dc>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e12:	4a4f      	ldr	r2, [pc, #316]	@ (8001f50 <HAL_GPIO_Init+0x2e0>)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	220f      	movs	r2, #15
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a46      	ldr	r2, [pc, #280]	@ (8001f54 <HAL_GPIO_Init+0x2e4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <HAL_GPIO_Init+0x1f6>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a45      	ldr	r2, [pc, #276]	@ (8001f58 <HAL_GPIO_Init+0x2e8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00d      	beq.n	8001e62 <HAL_GPIO_Init+0x1f2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a44      	ldr	r2, [pc, #272]	@ (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d007      	beq.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a43      	ldr	r2, [pc, #268]	@ (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_GPIO_Init+0x1ea>
 8001e56:	2303      	movs	r3, #3
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x1f8>
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	e004      	b.n	8001e68 <HAL_GPIO_Init+0x1f8>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_Init+0x1f8>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x1f8>
 8001e66:	2300      	movs	r3, #0
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	f002 0203 	and.w	r2, r2, #3
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	4093      	lsls	r3, r2
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e78:	4935      	ldr	r1, [pc, #212]	@ (8001f50 <HAL_GPIO_Init+0x2e0>)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e86:	4b37      	ldr	r3, [pc, #220]	@ (8001f64 <HAL_GPIO_Init+0x2f4>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8001f64 <HAL_GPIO_Init+0x2f4>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f64 <HAL_GPIO_Init+0x2f4>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed4:	4a23      	ldr	r2, [pc, #140]	@ (8001f64 <HAL_GPIO_Init+0x2f4>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eda:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <HAL_GPIO_Init+0x2f4>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001efe:	4a19      	ldr	r2, [pc, #100]	@ (8001f64 <HAL_GPIO_Init+0x2f4>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f04:	4b17      	ldr	r3, [pc, #92]	@ (8001f64 <HAL_GPIO_Init+0x2f4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f28:	4a0e      	ldr	r2, [pc, #56]	@ (8001f64 <HAL_GPIO_Init+0x2f4>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3301      	adds	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b0f      	cmp	r3, #15
 8001f38:	f67f aea8 	bls.w	8001c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3724      	adds	r7, #36	@ 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40013800 	.word	0x40013800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40013c00 	.word	0x40013c00

08001f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
 8001f74:	4613      	mov	r3, r2
 8001f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f78:	787b      	ldrb	r3, [r7, #1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f84:	e003      	b.n	8001f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f86:	887b      	ldrh	r3, [r7, #2]
 8001f88:	041a      	lsls	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	619a      	str	r2, [r3, #24]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0cc      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b68      	ldr	r3, [pc, #416]	@ (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d90c      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b65      	ldr	r3, [pc, #404]	@ (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b63      	ldr	r3, [pc, #396]	@ (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0b8      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff0:	4b59      	ldr	r3, [pc, #356]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4a58      	ldr	r2, [pc, #352]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ffa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002008:	4b53      	ldr	r3, [pc, #332]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a52      	ldr	r2, [pc, #328]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b50      	ldr	r3, [pc, #320]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	494d      	ldr	r1, [pc, #308]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d044      	beq.n	80020bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	4b47      	ldr	r3, [pc, #284]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d119      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e07f      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d003      	beq.n	800205a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002056:	2b03      	cmp	r3, #3
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	4b3f      	ldr	r3, [pc, #252]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e06f      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	4b3b      	ldr	r3, [pc, #236]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e067      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207a:	4b37      	ldr	r3, [pc, #220]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f023 0203 	bic.w	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4934      	ldr	r1, [pc, #208]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	4313      	orrs	r3, r2
 800208a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800208c:	f7ff fcda 	bl	8001a44 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	e00a      	b.n	80020aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7ff fcd6 	bl	8001a44 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e04f      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 020c 	and.w	r2, r3, #12
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1eb      	bne.n	8002094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020bc:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d20c      	bcs.n	80020e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b22      	ldr	r3, [pc, #136]	@ (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e032      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f0:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4916      	ldr	r1, [pc, #88]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d009      	beq.n	8002122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800210e:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	490e      	ldr	r1, [pc, #56]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002122:	f000 f821 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8002126:	4602      	mov	r2, r0
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	490a      	ldr	r1, [pc, #40]	@ (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	5ccb      	ldrb	r3, [r1, r3]
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fc3a 	bl	80019bc <HAL_InitTick>

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023c00 	.word	0x40023c00
 8002158:	40023800 	.word	0x40023800
 800215c:	080034a8 	.word	0x080034a8
 8002160:	20000000 	.word	0x20000000
 8002164:	20000004 	.word	0x20000004

08002168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800216c:	b090      	sub	sp, #64	@ 0x40
 800216e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002180:	4b59      	ldr	r3, [pc, #356]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b08      	cmp	r3, #8
 800218a:	d00d      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x40>
 800218c:	2b08      	cmp	r3, #8
 800218e:	f200 80a1 	bhi.w	80022d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x34>
 8002196:	2b04      	cmp	r3, #4
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800219a:	e09b      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800219c:	4b53      	ldr	r3, [pc, #332]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x184>)
 800219e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021a0:	e09b      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021a2:	4b53      	ldr	r3, [pc, #332]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021a6:	e098      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a8:	4b4f      	ldr	r3, [pc, #316]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021b2:	4b4d      	ldr	r3, [pc, #308]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d028      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021be:	4b4a      	ldr	r3, [pc, #296]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	099b      	lsrs	r3, r3, #6
 80021c4:	2200      	movs	r2, #0
 80021c6:	623b      	str	r3, [r7, #32]
 80021c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021d0:	2100      	movs	r1, #0
 80021d2:	4b47      	ldr	r3, [pc, #284]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021d4:	fb03 f201 	mul.w	r2, r3, r1
 80021d8:	2300      	movs	r3, #0
 80021da:	fb00 f303 	mul.w	r3, r0, r3
 80021de:	4413      	add	r3, r2
 80021e0:	4a43      	ldr	r2, [pc, #268]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021e2:	fba0 1202 	umull	r1, r2, r0, r2
 80021e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021e8:	460a      	mov	r2, r1
 80021ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80021ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021ee:	4413      	add	r3, r2
 80021f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f4:	2200      	movs	r2, #0
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	61fa      	str	r2, [r7, #28]
 80021fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002202:	f7fe fbf5 	bl	80009f0 <__aeabi_uldivmod>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4613      	mov	r3, r2
 800220c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800220e:	e053      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002210:	4b35      	ldr	r3, [pc, #212]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	2200      	movs	r2, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	617a      	str	r2, [r7, #20]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002222:	f04f 0b00 	mov.w	fp, #0
 8002226:	4652      	mov	r2, sl
 8002228:	465b      	mov	r3, fp
 800222a:	f04f 0000 	mov.w	r0, #0
 800222e:	f04f 0100 	mov.w	r1, #0
 8002232:	0159      	lsls	r1, r3, #5
 8002234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002238:	0150      	lsls	r0, r2, #5
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	ebb2 080a 	subs.w	r8, r2, sl
 8002242:	eb63 090b 	sbc.w	r9, r3, fp
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002252:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002256:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800225a:	ebb2 0408 	subs.w	r4, r2, r8
 800225e:	eb63 0509 	sbc.w	r5, r3, r9
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	00eb      	lsls	r3, r5, #3
 800226c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002270:	00e2      	lsls	r2, r4, #3
 8002272:	4614      	mov	r4, r2
 8002274:	461d      	mov	r5, r3
 8002276:	eb14 030a 	adds.w	r3, r4, sl
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	eb45 030b 	adc.w	r3, r5, fp
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800228e:	4629      	mov	r1, r5
 8002290:	028b      	lsls	r3, r1, #10
 8002292:	4621      	mov	r1, r4
 8002294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002298:	4621      	mov	r1, r4
 800229a:	028a      	lsls	r2, r1, #10
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a2:	2200      	movs	r2, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	60fa      	str	r2, [r7, #12]
 80022a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022ac:	f7fe fba0 	bl	80009f0 <__aeabi_uldivmod>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4613      	mov	r3, r2
 80022b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	3301      	adds	r3, #1
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80022c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022d2:	e002      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022d4:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x184>)
 80022d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3740      	adds	r7, #64	@ 0x40
 80022e0:	46bd      	mov	sp, r7
 80022e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	00f42400 	.word	0x00f42400
 80022f0:	017d7840 	.word	0x017d7840

080022f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e273      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d075      	beq.n	80023fe <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002312:	4b88      	ldr	r3, [pc, #544]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b04      	cmp	r3, #4
 800231c:	d00c      	beq.n	8002338 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b85      	ldr	r3, [pc, #532]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
        || \
 8002326:	2b08      	cmp	r3, #8
 8002328:	d112      	bne.n	8002350 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232a:	4b82      	ldr	r3, [pc, #520]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002336:	d10b      	bne.n	8002350 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	4b7e      	ldr	r3, [pc, #504]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d05b      	beq.n	80023fc <HAL_RCC_OscConfig+0x108>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d157      	bne.n	80023fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e24e      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x74>
 800235a:	4b76      	ldr	r3, [pc, #472]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a75      	ldr	r2, [pc, #468]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e01d      	b.n	80023a4 <HAL_RCC_OscConfig+0xb0>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x98>
 8002372:	4b70      	ldr	r3, [pc, #448]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6f      	ldr	r2, [pc, #444]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b6d      	ldr	r3, [pc, #436]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6c      	ldr	r2, [pc, #432]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0xb0>
 800238c:	4b69      	ldr	r3, [pc, #420]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a68      	ldr	r2, [pc, #416]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b66      	ldr	r3, [pc, #408]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a65      	ldr	r2, [pc, #404]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff fb4a 	bl	8001a44 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b4:	f7ff fb46 	bl	8001a44 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	@ 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e213      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0xc0>
 80023d2:	e014      	b.n	80023fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7ff fb36 	bl	8001a44 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023dc:	f7ff fb32 	bl	8001a44 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	@ 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1ff      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	4b51      	ldr	r3, [pc, #324]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0xe8>
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d063      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800240a:	4b4a      	ldr	r3, [pc, #296]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b47      	ldr	r3, [pc, #284]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
        || \
 800241e:	2b08      	cmp	r3, #8
 8002420:	d11c      	bne.n	800245c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002422:	4b44      	ldr	r3, [pc, #272]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d116      	bne.n	800245c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	4b41      	ldr	r3, [pc, #260]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_RCC_OscConfig+0x152>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e1d3      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	4b3b      	ldr	r3, [pc, #236]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4937      	ldr	r1, [pc, #220]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	e03a      	b.n	80024d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002464:	4b34      	ldr	r3, [pc, #208]	@ (8002538 <HAL_RCC_OscConfig+0x244>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7ff faeb 	bl	8001a44 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002472:	f7ff fae7 	bl	8001a44 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e1b4      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	4b2b      	ldr	r3, [pc, #172]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b28      	ldr	r3, [pc, #160]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4925      	ldr	r1, [pc, #148]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b24      	ldr	r3, [pc, #144]	@ (8002538 <HAL_RCC_OscConfig+0x244>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff faca 	bl	8001a44 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b4:	f7ff fac6 	bl	8001a44 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e193      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d036      	beq.n	800254c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d016      	beq.n	8002514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e6:	4b15      	ldr	r3, [pc, #84]	@ (800253c <HAL_RCC_OscConfig+0x248>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7ff faaa 	bl	8001a44 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f4:	f7ff faa6 	bl	8001a44 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e173      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <HAL_RCC_OscConfig+0x240>)
 8002508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x200>
 8002512:	e01b      	b.n	800254c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002514:	4b09      	ldr	r3, [pc, #36]	@ (800253c <HAL_RCC_OscConfig+0x248>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7ff fa93 	bl	8001a44 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	e00e      	b.n	8002540 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002522:	f7ff fa8f 	bl	8001a44 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d907      	bls.n	8002540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e15c      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
 8002534:	40023800 	.word	0x40023800
 8002538:	42470000 	.word	0x42470000
 800253c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002540:	4b8a      	ldr	r3, [pc, #552]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 8002542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ea      	bne.n	8002522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 8097 	beq.w	8002688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255e:	4b83      	ldr	r3, [pc, #524]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10f      	bne.n	800258a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	4b7f      	ldr	r3, [pc, #508]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	4a7e      	ldr	r2, [pc, #504]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002578:	6413      	str	r3, [r2, #64]	@ 0x40
 800257a:	4b7c      	ldr	r3, [pc, #496]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002586:	2301      	movs	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	4b79      	ldr	r3, [pc, #484]	@ (8002770 <HAL_RCC_OscConfig+0x47c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	4b76      	ldr	r3, [pc, #472]	@ (8002770 <HAL_RCC_OscConfig+0x47c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a75      	ldr	r2, [pc, #468]	@ (8002770 <HAL_RCC_OscConfig+0x47c>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7ff fa4f 	bl	8001a44 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7ff fa4b 	bl	8001a44 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e118      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002770 <HAL_RCC_OscConfig+0x47c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x2ea>
 80025d0:	4b66      	ldr	r3, [pc, #408]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d4:	4a65      	ldr	r2, [pc, #404]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6713      	str	r3, [r2, #112]	@ 0x70
 80025dc:	e01c      	b.n	8002618 <HAL_RCC_OscConfig+0x324>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x30c>
 80025e6:	4b61      	ldr	r3, [pc, #388]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ea:	4a60      	ldr	r2, [pc, #384]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f2:	4b5e      	ldr	r3, [pc, #376]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f6:	4a5d      	ldr	r2, [pc, #372]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0x324>
 8002600:	4b5a      	ldr	r3, [pc, #360]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002604:	4a59      	ldr	r2, [pc, #356]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	6713      	str	r3, [r2, #112]	@ 0x70
 800260c:	4b57      	ldr	r3, [pc, #348]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002610:	4a56      	ldr	r2, [pc, #344]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 8002612:	f023 0304 	bic.w	r3, r3, #4
 8002616:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d015      	beq.n	800264c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7ff fa10 	bl	8001a44 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7ff fa0c 	bl	8001a44 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0d7      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	4b4b      	ldr	r3, [pc, #300]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0ee      	beq.n	8002628 <HAL_RCC_OscConfig+0x334>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7ff f9fa 	bl	8001a44 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002652:	e00a      	b.n	800266a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7ff f9f6 	bl	8001a44 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0c1      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266a:	4b40      	ldr	r3, [pc, #256]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ee      	bne.n	8002654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267c:	4b3b      	ldr	r3, [pc, #236]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	4a3a      	ldr	r2, [pc, #232]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 8002682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002686:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80ad 	beq.w	80027ec <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002692:	4b36      	ldr	r3, [pc, #216]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b08      	cmp	r3, #8
 800269c:	d060      	beq.n	8002760 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d145      	bne.n	8002732 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b33      	ldr	r3, [pc, #204]	@ (8002774 <HAL_RCC_OscConfig+0x480>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7ff f9ca 	bl	8001a44 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7ff f9c6 	bl	8001a44 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e093      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c6:	4b29      	ldr	r3, [pc, #164]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	019b      	lsls	r3, r3, #6
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	3b01      	subs	r3, #1
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fc:	071b      	lsls	r3, r3, #28
 80026fe:	491b      	ldr	r1, [pc, #108]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002704:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <HAL_RCC_OscConfig+0x480>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7ff f99b 	bl	8001a44 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7ff f997 	bl	8001a44 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e064      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002724:	4b11      	ldr	r3, [pc, #68]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x41e>
 8002730:	e05c      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <HAL_RCC_OscConfig+0x480>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7ff f984 	bl	8001a44 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7ff f980 	bl	8001a44 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e04d      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_RCC_OscConfig+0x478>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x44c>
 800275e:	e045      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d107      	bne.n	8002778 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e040      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000
 8002774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002778:	4b1f      	ldr	r3, [pc, #124]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d030      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d129      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d122      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027a8:	4013      	ands	r3, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d119      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	3b01      	subs	r3, #1
 80027c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d10f      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800

080027fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e07b      	b.n	8002906 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	2b00      	cmp	r3, #0
 8002814:	d108      	bne.n	8002828 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800281e:	d009      	beq.n	8002834 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
 8002826:	e005      	b.n	8002834 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe ffbc 	bl	80017cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800286a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b8:	ea42 0103 	orr.w	r1, r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	f003 0104 	and.w	r1, r3, #4
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	f003 0210 	and.w	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b088      	sub	sp, #32
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800291e:	f7ff f891 	bl	8001a44 <HAL_GetTick>
 8002922:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	d001      	beq.n	8002938 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002934:	2302      	movs	r3, #2
 8002936:	e12a      	b.n	8002b8e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_SPI_Transmit+0x36>
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e122      	b.n	8002b8e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_SPI_Transmit+0x48>
 8002952:	2302      	movs	r3, #2
 8002954:	e11b      	b.n	8002b8e <HAL_SPI_Transmit+0x280>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2203      	movs	r2, #3
 8002962:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	88fa      	ldrh	r2, [r7, #6]
 8002976:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	88fa      	ldrh	r2, [r7, #6]
 800297c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029a4:	d10f      	bne.n	80029c6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d0:	2b40      	cmp	r3, #64	@ 0x40
 80029d2:	d007      	beq.n	80029e4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029ec:	d152      	bne.n	8002a94 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_SPI_Transmit+0xee>
 80029f6:	8b7b      	ldrh	r3, [r7, #26]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d145      	bne.n	8002a88 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	881a      	ldrh	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	1c9a      	adds	r2, r3, #2
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a20:	e032      	b.n	8002a88 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d112      	bne.n	8002a56 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a34:	881a      	ldrh	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	1c9a      	adds	r2, r3, #2
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a54:	e018      	b.n	8002a88 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a56:	f7fe fff5 	bl	8001a44 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d803      	bhi.n	8002a6e <HAL_SPI_Transmit+0x160>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d102      	bne.n	8002a74 <HAL_SPI_Transmit+0x166>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e082      	b.n	8002b8e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1c7      	bne.n	8002a22 <HAL_SPI_Transmit+0x114>
 8002a92:	e053      	b.n	8002b3c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_SPI_Transmit+0x194>
 8002a9c:	8b7b      	ldrh	r3, [r7, #26]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d147      	bne.n	8002b32 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	330c      	adds	r3, #12
 8002aac:	7812      	ldrb	r2, [r2, #0]
 8002aae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ac8:	e033      	b.n	8002b32 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d113      	bne.n	8002b00 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	7812      	ldrb	r2, [r2, #0]
 8002ae4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002afe:	e018      	b.n	8002b32 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b00:	f7fe ffa0 	bl	8001a44 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d803      	bhi.n	8002b18 <HAL_SPI_Transmit+0x20a>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d102      	bne.n	8002b1e <HAL_SPI_Transmit+0x210>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e02d      	b.n	8002b8e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1c6      	bne.n	8002aca <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	6839      	ldr	r1, [r7, #0]
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 fbe7 	bl	8003314 <SPI_EndRxTxTransaction>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b088      	sub	sp, #32
 8002b9a:	af02      	add	r7, sp, #8
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	603b      	str	r3, [r7, #0]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d001      	beq.n	8002bb6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e104      	b.n	8002dc0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bbe:	d112      	bne.n	8002be6 <HAL_SPI_Receive+0x50>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10e      	bne.n	8002be6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2204      	movs	r2, #4
 8002bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f8f3 	bl	8002dc8 <HAL_SPI_TransmitReceive>
 8002be2:	4603      	mov	r3, r0
 8002be4:	e0ec      	b.n	8002dc0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002be6:	f7fe ff2d 	bl	8001a44 <HAL_GetTick>
 8002bea:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_SPI_Receive+0x62>
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0e1      	b.n	8002dc0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_SPI_Receive+0x74>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e0da      	b.n	8002dc0 <HAL_SPI_Receive+0x22a>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2204      	movs	r2, #4
 8002c16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	88fa      	ldrh	r2, [r7, #6]
 8002c2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	88fa      	ldrh	r2, [r7, #6]
 8002c30:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c58:	d10f      	bne.n	8002c7a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c84:	2b40      	cmp	r3, #64	@ 0x40
 8002c86:	d007      	beq.n	8002c98 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d170      	bne.n	8002d82 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ca0:	e035      	b.n	8002d0e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d115      	bne.n	8002cdc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f103 020c 	add.w	r2, r3, #12
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbc:	7812      	ldrb	r2, [r2, #0]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cda:	e018      	b.n	8002d0e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cdc:	f7fe feb2 	bl	8001a44 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d803      	bhi.n	8002cf4 <HAL_SPI_Receive+0x15e>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d102      	bne.n	8002cfa <HAL_SPI_Receive+0x164>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e058      	b.n	8002dc0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1c4      	bne.n	8002ca2 <HAL_SPI_Receive+0x10c>
 8002d18:	e038      	b.n	8002d8c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d113      	bne.n	8002d50 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d32:	b292      	uxth	r2, r2
 8002d34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3a:	1c9a      	adds	r2, r3, #2
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d4e:	e018      	b.n	8002d82 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d50:	f7fe fe78 	bl	8001a44 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d803      	bhi.n	8002d68 <HAL_SPI_Receive+0x1d2>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d66:	d102      	bne.n	8002d6e <HAL_SPI_Receive+0x1d8>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e01e      	b.n	8002dc0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1c6      	bne.n	8002d1a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	6839      	ldr	r1, [r7, #0]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fa59 	bl	8003248 <SPI_EndRxTransaction>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
  }
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	@ 0x28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dda:	f7fe fe33 	bl	8001a44 <HAL_GetTick>
 8002dde:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002de6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d00c      	beq.n	8002e12 <HAL_SPI_TransmitReceive+0x4a>
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dfe:	d106      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x46>
 8002e08:	7ffb      	ldrb	r3, [r7, #31]
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d001      	beq.n	8002e12 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e17f      	b.n	8003112 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_SPI_TransmitReceive+0x5c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_SPI_TransmitReceive+0x5c>
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e174      	b.n	8003112 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_SPI_TransmitReceive+0x6e>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e16d      	b.n	8003112 <HAL_SPI_TransmitReceive+0x34a>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d003      	beq.n	8002e52 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2205      	movs	r2, #5
 8002e4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	887a      	ldrh	r2, [r7, #2]
 8002e62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	887a      	ldrh	r2, [r7, #2]
 8002e68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	887a      	ldrh	r2, [r7, #2]
 8002e7a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e92:	2b40      	cmp	r3, #64	@ 0x40
 8002e94:	d007      	beq.n	8002ea6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ea4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eae:	d17e      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_SPI_TransmitReceive+0xf6>
 8002eb8:	8afb      	ldrh	r3, [r7, #22]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d16c      	bne.n	8002f98 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	881a      	ldrh	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	1c9a      	adds	r2, r3, #2
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ee2:	e059      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d11b      	bne.n	8002f2a <HAL_SPI_TransmitReceive+0x162>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d016      	beq.n	8002f2a <HAL_SPI_TransmitReceive+0x162>
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d113      	bne.n	8002f2a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	1c9a      	adds	r2, r3, #2
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d119      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x1a4>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d014      	beq.n	8002f6c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4c:	b292      	uxth	r2, r2
 8002f4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f54:	1c9a      	adds	r2, r3, #2
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f6c:	f7fe fd6a 	bl	8001a44 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d80d      	bhi.n	8002f98 <HAL_SPI_TransmitReceive+0x1d0>
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f82:	d009      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0bc      	b.n	8003112 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1a0      	bne.n	8002ee4 <HAL_SPI_TransmitReceive+0x11c>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d19b      	bne.n	8002ee4 <HAL_SPI_TransmitReceive+0x11c>
 8002fac:	e082      	b.n	80030b4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_SPI_TransmitReceive+0x1f4>
 8002fb6:	8afb      	ldrh	r3, [r7, #22]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d171      	bne.n	80030a0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	7812      	ldrb	r2, [r2, #0]
 8002fc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fe2:	e05d      	b.n	80030a0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d11c      	bne.n	800302c <HAL_SPI_TransmitReceive+0x264>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d017      	beq.n	800302c <HAL_SPI_TransmitReceive+0x264>
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d114      	bne.n	800302c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	330c      	adds	r3, #12
 800300c:	7812      	ldrb	r2, [r2, #0]
 800300e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b01      	cmp	r3, #1
 8003038:	d119      	bne.n	800306e <HAL_SPI_TransmitReceive+0x2a6>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d014      	beq.n	800306e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800306a:	2301      	movs	r3, #1
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800306e:	f7fe fce9 	bl	8001a44 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800307a:	429a      	cmp	r2, r3
 800307c:	d803      	bhi.n	8003086 <HAL_SPI_TransmitReceive+0x2be>
 800307e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d102      	bne.n	800308c <HAL_SPI_TransmitReceive+0x2c4>
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	2b00      	cmp	r3, #0
 800308a:	d109      	bne.n	80030a0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e038      	b.n	8003112 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d19c      	bne.n	8002fe4 <HAL_SPI_TransmitReceive+0x21c>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d197      	bne.n	8002fe4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030b4:	6a3a      	ldr	r2, [r7, #32]
 80030b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f92b 	bl	8003314 <SPI_EndRxTxTransaction>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e01d      	b.n	8003112 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003110:	2300      	movs	r3, #0
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3728      	adds	r7, #40	@ 0x28
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003128:	b2db      	uxtb	r3, r3
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003148:	f7fe fc7c 	bl	8001a44 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	4413      	add	r3, r2
 8003156:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003158:	f7fe fc74 	bl	8001a44 <HAL_GetTick>
 800315c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800315e:	4b39      	ldr	r3, [pc, #228]	@ (8003244 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	015b      	lsls	r3, r3, #5
 8003164:	0d1b      	lsrs	r3, r3, #20
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	fb02 f303 	mul.w	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800316e:	e054      	b.n	800321a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003176:	d050      	beq.n	800321a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003178:	f7fe fc64 	bl	8001a44 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	429a      	cmp	r2, r3
 8003186:	d902      	bls.n	800318e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d13d      	bne.n	800320a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800319c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031a6:	d111      	bne.n	80031cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031b0:	d004      	beq.n	80031bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ba:	d107      	bne.n	80031cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031d4:	d10f      	bne.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e017      	b.n	800323a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	3b01      	subs	r3, #1
 8003218:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4013      	ands	r3, r2
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	429a      	cmp	r2, r3
 8003228:	bf0c      	ite	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	2300      	movne	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	429a      	cmp	r2, r3
 8003236:	d19b      	bne.n	8003170 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000000 	.word	0x20000000

08003248 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800325c:	d111      	bne.n	8003282 <SPI_EndRxTransaction+0x3a>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003266:	d004      	beq.n	8003272 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003270:	d107      	bne.n	8003282 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003280:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800328a:	d12a      	bne.n	80032e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003294:	d012      	beq.n	80032bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2200      	movs	r2, #0
 800329e:	2180      	movs	r1, #128	@ 0x80
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f7ff ff49 	bl	8003138 <SPI_WaitFlagStateUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d02d      	beq.n	8003308 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e026      	b.n	800330a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2200      	movs	r2, #0
 80032c4:	2101      	movs	r1, #1
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f7ff ff36 	bl	8003138 <SPI_WaitFlagStateUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d01a      	beq.n	8003308 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d6:	f043 0220 	orr.w	r2, r3, #32
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e013      	b.n	800330a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2200      	movs	r2, #0
 80032ea:	2101      	movs	r1, #1
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff ff23 	bl	8003138 <SPI_WaitFlagStateUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e000      	b.n	800330a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2201      	movs	r2, #1
 8003328:	2102      	movs	r1, #2
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7ff ff04 	bl	8003138 <SPI_WaitFlagStateUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e032      	b.n	80033ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003346:	4b1b      	ldr	r3, [pc, #108]	@ (80033b4 <SPI_EndRxTxTransaction+0xa0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1b      	ldr	r2, [pc, #108]	@ (80033b8 <SPI_EndRxTxTransaction+0xa4>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	0d5b      	lsrs	r3, r3, #21
 8003352:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003364:	d112      	bne.n	800338c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2200      	movs	r2, #0
 800336e:	2180      	movs	r1, #128	@ 0x80
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7ff fee1 	bl	8003138 <SPI_WaitFlagStateUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d016      	beq.n	80033aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003380:	f043 0220 	orr.w	r2, r3, #32
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e00f      	b.n	80033ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	3b01      	subs	r3, #1
 8003396:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a2:	2b80      	cmp	r3, #128	@ 0x80
 80033a4:	d0f2      	beq.n	800338c <SPI_EndRxTxTransaction+0x78>
 80033a6:	e000      	b.n	80033aa <SPI_EndRxTxTransaction+0x96>
        break;
 80033a8:	bf00      	nop
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000000 	.word	0x20000000
 80033b8:	165e9f81 	.word	0x165e9f81

080033bc <memset>:
 80033bc:	4402      	add	r2, r0
 80033be:	4603      	mov	r3, r0
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d100      	bne.n	80033c6 <memset+0xa>
 80033c4:	4770      	bx	lr
 80033c6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ca:	e7f9      	b.n	80033c0 <memset+0x4>

080033cc <__libc_init_array>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003404 <__libc_init_array+0x38>)
 80033d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003408 <__libc_init_array+0x3c>)
 80033d2:	1b64      	subs	r4, r4, r5
 80033d4:	10a4      	asrs	r4, r4, #2
 80033d6:	2600      	movs	r6, #0
 80033d8:	42a6      	cmp	r6, r4
 80033da:	d109      	bne.n	80033f0 <__libc_init_array+0x24>
 80033dc:	4d0b      	ldr	r5, [pc, #44]	@ (800340c <__libc_init_array+0x40>)
 80033de:	4c0c      	ldr	r4, [pc, #48]	@ (8003410 <__libc_init_array+0x44>)
 80033e0:	f000 f826 	bl	8003430 <_init>
 80033e4:	1b64      	subs	r4, r4, r5
 80033e6:	10a4      	asrs	r4, r4, #2
 80033e8:	2600      	movs	r6, #0
 80033ea:	42a6      	cmp	r6, r4
 80033ec:	d105      	bne.n	80033fa <__libc_init_array+0x2e>
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
 80033f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f4:	4798      	blx	r3
 80033f6:	3601      	adds	r6, #1
 80033f8:	e7ee      	b.n	80033d8 <__libc_init_array+0xc>
 80033fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80033fe:	4798      	blx	r3
 8003400:	3601      	adds	r6, #1
 8003402:	e7f2      	b.n	80033ea <__libc_init_array+0x1e>
 8003404:	080034c0 	.word	0x080034c0
 8003408:	080034c0 	.word	0x080034c0
 800340c:	080034c0 	.word	0x080034c0
 8003410:	080034c4 	.word	0x080034c4

08003414 <memcpy>:
 8003414:	440a      	add	r2, r1
 8003416:	4291      	cmp	r1, r2
 8003418:	f100 33ff 	add.w	r3, r0, #4294967295
 800341c:	d100      	bne.n	8003420 <memcpy+0xc>
 800341e:	4770      	bx	lr
 8003420:	b510      	push	{r4, lr}
 8003422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800342a:	4291      	cmp	r1, r2
 800342c:	d1f9      	bne.n	8003422 <memcpy+0xe>
 800342e:	bd10      	pop	{r4, pc}

08003430 <_init>:
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	bf00      	nop
 8003434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003436:	bc08      	pop	{r3}
 8003438:	469e      	mov	lr, r3
 800343a:	4770      	bx	lr

0800343c <_fini>:
 800343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343e:	bf00      	nop
 8003440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003442:	bc08      	pop	{r3}
 8003444:	469e      	mov	lr, r3
 8003446:	4770      	bx	lr
